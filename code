

#include <sys/wait.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MAX_COMMAND_SIZE 1024
#define MAX_ALIAS_SIZE 100

struct Alias {
  char alias[MAX_COMMAND_SIZE];
  char command[MAX_COMMAND_SIZE];
};

struct Alias aliases[MAX_ALIAS_SIZE];
int alias_count = 0;

/*
  Function Declarations for builtin shell commands:
 */
int lsh_cd(char **args);
int lsh_help(char **args);
int lsh_exit(char **args);
int lsh_alias(char **args);
void show_aliases();
_Bool add_alias(char *alias, char *command);
char *expand_alias(char *command);
int lsh_echo(char **args);

/*
  List of builtin commands, followed by their corresponding functions.
 */
char *builtin_str[] = {
  "cd",
  "help",
  "exit",
  "alias",
  "echo"
};

int (*builtin_func[]) (char **) = {
  &lsh_cd,
  &lsh_help,
  &lsh_exit,
  &lsh_alias,
  &lsh_echo
};

int lsh_echo(char **args)
{
  int i = 1;
  while (args[i] != NULL) {
    printf("%s ", args[i]);
    i++;
  }
  printf("\n");
  return 1;
}
int lsh_num_builtins() {
  return sizeof(builtin_str) / sizeof(char *);
}

/*
  Builtin function implementations.
*/

/**
   @brief Builtin command: change directory.
   @param args List of args.  args[0] is "cd".  args[1] is the directory.
   @return Always returns 1, to continue executing.
 */
int lsh_cd(char **args)
{
  if (args[1] == NULL) {
    fprintf(stderr, "lsh: expected argument to \"cd\"\n");
  } else {
    if (chdir(args[1]) != 0) {
      perror("lsh");
    }
  }
  return 1;
}

/**
   @brief Builtin command: print help.
   @param args List of args.  Not examined.
   @return Always returns 1, to continue executing.
 */
int lsh_help(char **args)
{
  int i;
  printf("Kartikey's LSH\n");
  printf("Type program names and arguments, and hit enter.\n");
  printf("The following are built in:\n");

  for (i = 0; i < lsh_num_builtins(); i++) {
    printf("  %s\n", builtin_str[i]);
  }

  printf("Use the man command for information on other programs.\n");
  return 1;
}

/**
   @brief Builtin command: exit.
   @param args List of args.  Not examined.
   @return Always returns 0, to terminate execution.
 */
int lsh_exit(char **args)
{
  return 0;
}

/**
   @brief Builtin command: alias.
   @param args List of args.  args[0] is "alias".  args[1] is the alias name, args[2] is the command.
   @return Always returns 1, to continue executing.
 */
int lsh_alias(char **args)
{
  if (args[1] == NULL || args[2] == NULL) {
    fprintf(stderr, "lsh: expected arguments to \"alias\"\n");
  } else {
    if (add_alias(args[1], args[2])) {
      printf("Alias added: %s -> %s\n", args[1], args[2]);
    } else {
      fprintf(stderr, "lsh: failed to add alias\n");
    }
  }
  return 1;
}

/**
   @brief Add an alias to the list of aliases.
   @param alias The alias name.
   @param command The command associated with the alias.
   @return 1 if the alias is added successfully, 0 otherwise.
 */
_Bool add_alias(char *alias, char *command)
{
  if (alias_count < MAX_ALIAS_SIZE) {
    strncpy(aliases[alias_count].alias, alias, MAX_COMMAND_SIZE);
    strncpy(aliases[alias_count].command, command, MAX_COMMAND_SIZE);
    alias_count++;
    return 1;
  }
  return 0;
}

/**
   @brief Expand aliases in a command.
   @param command The command to expand aliases in.
   @return The expanded command.
 */
char *expand_alias(char *command)
{
  char *expanded = malloc(sizeof(char) * MAX_COMMAND_SIZE);
  if (expanded == NULL) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }
  strncpy(expanded, command, MAX_COMMAND_SIZE);

  for (int i = 0; i < alias_count; i++) {
    if (strcmp(aliases[i].alias, command) == 0) {
      strncpy(expanded, aliases[i].command, MAX_COMMAND_SIZE);
      break;
    }
  }

  return expanded;
}

/**
   @brief Builtin command: show aliases.
   @param args List of args.  Not examined.
   @return Always returns 1, to continue executing.
 */
void show_aliases()
{
  if (alias_count == 0) {
    printf("No aliases defined.\n");
  } else {
    printf("Aliases:\n");
    for (int i = 0; i < alias_count; i++) {
      printf("  %s -> %s\n", aliases[i].alias, aliases[i].command);
    }
  }
}

/**
  @brief Launch a program and wait for it to terminate.
  @param args Null terminated list of arguments (including program).
  @return Always returns 1, to continue execution.
 */
int lsh_launch(char **args)
{
  pid_t pid;
  int status;

  pid = fork();
  if (pid == 0) {
    // Child process
    if (execvp(args[0], args) == -1) {
      perror("lsh");
    }
    exit(EXIT_FAILURE);
  } else if (pid < 0) {
    // Error forking
    perror("lsh");
  } else {
    // Parent process
    do {
      waitpid(pid, &status, WUNTRACED);
    } while (!WIFEXITED(status) && !WIFSIGNALED(status));
  }

  return 1;
}

/**
   @brief Execute shell built-in or launch program.
   @param args Null terminated list of arguments.
   @return 1 if the shell should continue running, 0 if it should terminate.
 */
int lsh_execute(char **args)
{
  int i;

  if (args[0] == NULL) {
    // An empty command was entered.
    return 1;
  }

  // Check if the command is an alias
  char *expanded_command = expand_alias(args[0]);

  for (i = 0; i < lsh_num_builtins(); i++) {
    if (strcmp(expanded_command, builtin_str[i]) == 0) {
      free(expanded_command);
      return (*builtin_func[i])(args);
    }
  }

  if (access(args[0], X_OK) == -1) {
    fprintf(stderr, "shell: unrecognized command: %s\n", args[0]);
    return 1;
  }

  free(expanded_command);

  return lsh_launch(args);
}

/**
   @brief Read a line of input from stdin.
   @return The line from stdin.
 */
char *lsh_read_line(void)
{
  int bufsize = MAX_COMMAND_SIZE;
  int position = 0;
  char *buffer = malloc(sizeof(char) * bufsize);
  int c;

  if (!buffer) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }

  while (1) {
    // Read a character
    c = getchar();

    if (c == EOF || c == '\n') {
      buffer[position] = '\0';
      return buffer;
    } else {
      buffer[position] = c;
    }
    position++;

    // Reallocate if buffer size is exceeded
    if (position >= bufsize) {
      bufsize += MAX_COMMAND_SIZE;
      buffer = realloc(buffer, bufsize);
      if (!buffer) {
        fprintf(stderr, "lsh: allocation error\n");
        exit(EXIT_FAILURE);
      }
    }
  }
}

/**
   @brief Split a line into tokens (very naively).
   @param line The line.
   @return Null-terminated array of tokens.
 */
char **lsh_split_line(char *line)
{
  int bufsize = MAX_COMMAND_SIZE, position = 0;
  char **tokens = malloc(bufsize * sizeof(char *));
  char *token;

  if (!tokens) {
    fprintf(stderr, "lsh: allocation error\n");
    exit(EXIT_FAILURE);
  }

  token = strtok(line, " \t\r\n\a");
  while (token != NULL) {
    tokens[position] = token;
    position++;

    if (position >= bufsize) {
      bufsize += MAX_COMMAND_SIZE;
      tokens = realloc(tokens, bufsize * sizeof(char *));
      if (!tokens) {
        fprintf(stderr, "lsh: allocation error\n");
        exit(EXIT_FAILURE);
      }
    }

    token = strtok(NULL, " \t\r\n\a");
  }
  tokens[position] = NULL;
  return tokens;
}

/**
   @brief Loop getting input and executing it.
 */
void lsh_loop(void)
{
  char *line;
  char **args;
  int status;

  do {
    printf("> ");
    line = lsh_read_line();
    args = lsh_split_line(line);
    status = lsh_execute(args);

    free(line);
    free(args);
  } while (status);
}

/**
   @brief Main entry point.
   @param argc Argument count.
   @param argv Argument vector.
   @return status code
 */
int main(int argc, char **argv)
{
  // Load config files, if any.

  // Run command loop.
  lsh_loop();

  // Perform any shutdown/cleanup.

  return EXIT_SUCCESS;
}
