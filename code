 //1. Implementation of ALIAS buitin in shell.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<stdbool.h>

typedef struct Alias {
    char* name;
    char* command;
    struct Alias* next;
} Alias;

Alias* aliases = NULL;

Alias* create_alias(char* name, char* command) {
    Alias* new_alias = malloc(sizeof(Alias));
    if (new_alias == NULL) {
        fprintf(stderr, "Memory allocation error\n");
        exit(1);
    }

    new_alias->name = strdup(name);
    if (new_alias->name == NULL) {
        fprintf(stderr, "Memory allocation error\n");
        exit(1);
    }

    new_alias->command = strdup(command);
    if (new_alias->command == NULL) {
        fprintf(stderr, "Memory allocation error\n");
        exit(1);
    }

    new_alias->next = NULL;

    return new_alias;
}

void add_alias(char* name, char* command) {
    Alias* new_alias = create_alias(name, command);
    new_alias->next = aliases;
    aliases = new_alias;
}

void remove_alias(char* name) {
    Alias* current = aliases;
    Alias* prev = NULL;

    while (current != NULL) {
        if (strcmp(current->name, name) == 0) {
            if (prev == NULL) {
                aliases = current->next;
            } else {
                prev->next = current->next;
            }

            free(current->name);
            free(current->command);
            free(current);
            return;
        }

        prev = current;
        current = current->next;
    }

    fprintf(stderr, "Alias '%s' not found\n", name);
}

char* expand_alias(char* name) {
    Alias* current = aliases;

    while (current != NULL) {
        if (strcmp(current->name, name) == 0) {
            return current->command;
        }
        current = current->next;
    }

    return NULL;
}

void free_aliases() {
    Alias* current = aliases;
    Alias* next;

    while (current != NULL) {
        next = current->next;
        free(current->name);
        free(current->command);
        free(current);
        current = next;
    }
}

int main() {
    add_alias("l", "ls");
    add_alias("ll", "ls -l");
    add_alias("c", "clear");
    
    bool valid=true;

    char command[256];

    while (1) {
        printf("Enter a command: ");
        fgets(command, sizeof(command), stdin);

        // Remove trailing newline character
        command[strcspn(command, "\n")] = '\0';

        // Check if the command matches an alias
        char* expanded_command = expand_alias(command);
        if (expanded_command != NULL) {
            printf("Expanded command: %s\n", expanded_command);
            strcpy(command, expanded_command);
        }
        else{
            valid=false;
            printf("Invalid command \n");
        }

        if (strcmp(command, "alias") == 0) {
            char alias_name[256];
            char alias_command[256];

            printf("Enter alias name: ");
            fgets(alias_name, sizeof(alias_name), stdin);
            alias_name[strcspn(alias_name, "\n")] = '\0';

            printf("Enter alias command: ");
            fgets(alias_command, sizeof(alias_command), stdin);
            alias_command[strcspn(alias_command, "\n")] = '\0';

            add_alias(alias_name, alias_command);
        } else if (strcmp(command, "unalias") == 0) {
            char alias_name[256];

            printf("Enter alias name to remove: ");
            fgets(alias_name, sizeof(alias_name), stdin);
            alias_name[strcspn(alias_name, "\n")] = '\0';

            remove_alias(alias_name);
        } else if (strcmp(command, "exit") == 0) {
            break;
        } 
        if(valid) {
            printf("Executing command: %s\n", command);
            // Execute the command
            // ...
        }
    }

    free_aliases();

    return 0;
}


//2. Implementation of UNALIAS buitin in shell

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ALIAS_LENGTH 100
#define MAX_COMMAND_LENGTH 100
#define MAX_ALIASES 10

typedef struct {
    char alias[MAX_ALIAS_LENGTH];
    char command[MAX_COMMAND_LENGTH];
} Alias;

Alias aliases[MAX_ALIASES];
int numAliases = 0;

void addAlias(const char *alias, const char *command) {
    if (numAliases >= MAX_ALIASES) {
        printf("Maximum number of aliases exceeded.\n");
        return;
    }

    strcpy(aliases[numAliases].alias, alias);
    strcpy(aliases[numAliases].command, command);
    numAliases++;
}

void removeAlias(const char *alias) {
    for (int i = 0; i < numAliases; i++) {
        if (strcmp(aliases[i].alias, alias) == 0) {
            for (int j = i; j < numAliases - 1; j++) {
                strcpy(aliases[j].alias, aliases[j + 1].alias);
                strcpy(aliases[j].command, aliases[j + 1].command);
            }
            numAliases--;
            printf("Removed alias: %s\n", alias);
            return;
        }
    }
    printf("Alias not found: %s\n", alias);
}

void printAliases() {
    printf("Defined aliases:\n");
    for (int i = 0; i < numAliases; i++) {
        printf("%s=%s\n", aliases[i].alias, aliases[i].command);
    }
}

int main() {
    while (1) {
        printf("Enter command (unalias, print, exit): ");
        char input[MAX_COMMAND_LENGTH];
        scanf("%s", input);

        if (strcmp(input, "unalias") == 0) {
            printf("Enter alias to remove: ");
            char alias[MAX_ALIAS_LENGTH];
            scanf("%s", alias);
            removeAlias(alias);
        } else if (strcmp(input, "print") == 0) {
            printAliases();
        } else if (strcmp(input, "exit") == 0) {
            break;
        } else {
            printf("Invalid command\n");
        }
    }

    return 0;
}

//3. Implementing echo builtin

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void shell_echo(const char* message) {
    fputs(message, stdout);
    putchar('\n');
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Error: No message provided\n");
        return 1;
    }

    // Concatenate command-line arguments
    char* message = argv[1];
    for (int i = 2; i < argc; i++) {
        message = realloc(message, strlen(message) + strlen(argv[i]) + 2);
        strcat(message, " ");
        strcat(message, argv[i]);
    }

    shell_echo(message);
    free(message);

    return 0;
}


// 4. printf function basic implementation

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

void shell_printf(const char* format, ...) {
    va_list args;
    va_start(args, format);

    int i = 0;
    char ch;
    char buffer[256];
    int buffer_index = 0;

    while ((ch = format[i++]) != '\0') {
        if (ch == '%') {
            ch = format[i++];
            buffer_index = 0;

            switch (ch) {
                case 'c':
                    putchar(va_arg(args, int));
                    break;
                case 'd':
                    snprintf(buffer, sizeof(buffer), "%d", va_arg(args, int));
                    fputs(buffer, stdout);
                    break;
                case 's':
                    fputs(va_arg(args, char*), stdout);
                    break;
                case 'f':
                    snprintf(buffer, sizeof(buffer), "%f", va_arg(args, double));
                    fputs(buffer, stdout);
                    break;
                default:
                    putchar(ch);
                    break;
            }
        } 
        
        else {
            putchar(ch);
        }
    }

    va_end(args);
}

int main() {
    shell_printf("Hello, %s!\n", "User");
    shell_printf("The answer is %d\n", 42);
    shell_printf("The value of PI is %f\n", 3.14159);

    return 0;
}

//5. Implementation of cd 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

void change_directory(const char* directory) {
    if (chdir(directory) != 0) {
        fprintf(stderr, "Error: Failed to change directory to %s\n", directory);
    }
}

void update_pwd_environment_variable() {
    char cwd[256];
    if (getcwd(cwd, sizeof(cwd)) != NULL) {
        setenv("PWD", cwd, 1);
    } else {
        fprintf(stderr, "Error: Failed to update PWD environment variable\n");
    }
}

int main() {
    char directory[256];

    while (1) {
        printf("Enter a directory you want to work in : ");
        fgets(directory, sizeof(directory), stdin);

        // Remove trailing newline character
        directory[strcspn(directory, "\n")] = '\0';

        if (strcmp(directory, "cd") == 0) {
            // No directory specified, go to the user's home directory
            const char* home_dir = getenv("HOME");
            if (home_dir == NULL) {
                fprintf(stderr, "Error: Home directory not found\n");
                continue;
            }

            change_directory(home_dir);
            update_pwd_environment_variable();
        } else if (strcmp(directory, "exit") == 0) {
            break;
        } else {
            change_directory(directory);
            update_pwd_environment_variable();
        }
    }

    return 0;
}


//6. Implementation of help

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_COMMANDS 10

typedef struct {
    char name[MAX_COMMAND_LENGTH];
    int enabled;
} Command;

Command commands[MAX_COMMANDS];
int numCommands = 0;

void enableCommand(const char *commandName) {
    for (int i = 0; i < numCommands; i++) {
        if (strcmp(commands[i].name, commandName) == 0) {
            commands[i].enabled = 1;
            printf("Enabled command: %s\n", commandName);
            return;
        }
    }
    printf("Command not found: %s\n", commandName);
}

void disableCommand(const char *commandName) {
    for (int i = 0; i < numCommands; i++) {
        if (strcmp(commands[i].name, commandName) == 0) {
            commands[i].enabled = 0;
            printf("Disabled command: %s\n", commandName);
            return;
        }
    }
    printf("Command not found: %s\n", commandName);
}

void executeCommand(const char *commandName) {
    for (int i = 0; i < numCommands; i++) {
        if (strcmp(commands[i].name, commandName) == 0) {
            if (commands[i].enabled) {
                printf("Executing command: %s\n", commandName);
                return;
            } else {
                printf("Command is disabled: %s\n", commandName);
                return;
            }
        }
    }
    printf("Command not found: %s\n", commandName);
}

void printCommands() {
    printf("Enabled commands:\n");
    for (int i = 0; i < numCommands; i++) {
        if (commands[i].enabled) {
            printf("%s\n", commands[i].name);
        }
    }
    printf("Disabled commands:\n");
    for (int i = 0; i < numCommands; i++) {
        if (!commands[i].enabled) {
            printf("%s\n", commands[i].name);
        }
    }
}

int main() {
    while (1) {
        printf("Enter command (enable, disable, execute, print, exit): ");
        char input[MAX_COMMAND_LENGTH];
        scanf("%s", input);

        if (strcmp(input, "enable") == 0) {
            printf("Enter command to enable: ");
            char command[MAX_COMMAND_LENGTH];
            scanf("%s", command);
            enableCommand(command);
        } else if (strcmp(input, "disable") == 0) {
            printf("Enter command to disable: ");
            char command[MAX_COMMAND_LENGTH];
            scanf("%s", command);
            disableCommand(command);
        } else if (strcmp(input, "execute") == 0) {
            printf("Enter command to execute: ");
            char command[MAX_COMMAND_LENGTH];
            scanf("%s", command);
            executeCommand(command);
        } else if (strcmp(input, "print") == 0) {
            printCommands();
        } else if (strcmp(input, "exit") == 0) {
            break;
        } else {
            printf("Invalid command\n");
        }
    }

    return 0;
}

//7. Implementation of exit 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100

int main() {
    while (1) {
        printf("Enter command (exit to terminate): ");
        char input[MAX_COMMAND_LENGTH];
        scanf("%s", input);

        if (strcmp(input, "exit") == 0) {
            printf("Exiting the shell...\n");
            break;
        } 
        else {
            printf("Invalid command\n");
        }
    }

    return 0;
}



//8.Implementation of enable

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_COMMANDS 10

typedef struct {
    char name[MAX_COMMAND_LENGTH];
    int enabled;
} Command;

Command commands[MAX_COMMANDS];
int numCommands = 0;

void enableCommand(const char *commandName) {
    for (int i = 0; i < numCommands; i++) {
        if (strcmp(commands[i].name, commandName) == 0) {
            commands[i].enabled = 1;
            printf("Enabled command: %s\n", commandName);
            return;
        }
    }
    printf("Command not found: %s\n", commandName);
}

void disableCommand(const char *commandName) {
    for (int i = 0; i < numCommands; i++) {
        if (strcmp(commands[i].name, commandName) == 0) {
            commands[i].enabled = 0;
            printf("Disabled command: %s\n", commandName);
            return;
        }
    }
    printf("Command not found: %s\n", commandName);
}

void executeCommand(const char *commandName) {
    for (int i = 0; i < numCommands; i++) {
        if (strcmp(commands[i].name, commandName) == 0) {
            if (commands[i].enabled) {
                printf("Executing command: %s\n", commandName);
                return;
            } else {
                printf("Command is disabled: %s\n", commandName);
                return;
            }
        }
    }
    printf("Command not found: %s\n", commandName);
}

void printCommands() {
    printf("Enabled commands:\n");
    for (int i = 0; i < numCommands; i++) {
        if (commands[i].enabled) {
            printf("%s\n", commands[i].name);
        }
    }
    printf("Disabled commands:\n");
    for (int i = 0; i < numCommands; i++) {
        if (!commands[i].enabled) {
            printf("%s\n", commands[i].name);
        }
    }
}

int main() {
    while (1) {
        printf("Enter command (enable, disable, execute, print, exit): ");
        char input[MAX_COMMAND_LENGTH];
        scanf("%s", input);

        if (strcmp(input, "enable") == 0) {
            printf("Enter command to enable: ");
            char command[MAX_COMMAND_LENGTH];
            scanf("%s", command);
            enableCommand(command);
        } else if (strcmp(input, "disable") == 0) {
            printf("Enter command to disable: ");
            char command[MAX_COMMAND_LENGTH];
            scanf("%s", command);
            disableCommand(command);
        } else if (strcmp(input, "execute") == 0) {
            printf("Enter command to execute: ");
            char command[MAX_COMMAND_LENGTH];
            scanf("%s", command);
            executeCommand(command);
        } else if (strcmp(input, "print") == 0) {
            printCommands();
        } else if (strcmp(input, "exit") == 0) {
            break;
        } else {
            printf("Invalid command\n");
        }
    }

    return 0;
}



